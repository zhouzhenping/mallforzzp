<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzp.mall.mapper.ReplicationGroupMemberStatsMapper">
  <resultMap id="BaseResultMap" type="com.zzp.mall.model.ReplicationGroupMemberStats">
    <result column="CHANNEL_NAME" jdbcType="CHAR" property="channelName" />
    <result column="VIEW_ID" jdbcType="CHAR" property="viewId" />
    <result column="MEMBER_ID" jdbcType="CHAR" property="memberId" />
    <result column="COUNT_TRANSACTIONS_IN_QUEUE" jdbcType="BIGINT" property="countTransactionsInQueue" />
    <result column="COUNT_TRANSACTIONS_CHECKED" jdbcType="BIGINT" property="countTransactionsChecked" />
    <result column="COUNT_CONFLICTS_DETECTED" jdbcType="BIGINT" property="countConflictsDetected" />
    <result column="COUNT_TRANSACTIONS_ROWS_VALIDATING" jdbcType="BIGINT" property="countTransactionsRowsValidating" />
    <result column="COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE" jdbcType="BIGINT" property="countTransactionsRemoteInApplierQueue" />
    <result column="COUNT_TRANSACTIONS_REMOTE_APPLIED" jdbcType="BIGINT" property="countTransactionsRemoteApplied" />
    <result column="COUNT_TRANSACTIONS_LOCAL_PROPOSED" jdbcType="BIGINT" property="countTransactionsLocalProposed" />
    <result column="COUNT_TRANSACTIONS_LOCAL_ROLLBACK" jdbcType="BIGINT" property="countTransactionsLocalRollback" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.zzp.mall.model.ReplicationGroupMemberStats">
    <result column="TRANSACTIONS_COMMITTED_ALL_MEMBERS" jdbcType="LONGVARCHAR" property="transactionsCommittedAllMembers" />
    <result column="LAST_CONFLICT_FREE_TRANSACTION" jdbcType="LONGVARCHAR" property="lastConflictFreeTransaction" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    CHANNEL_NAME, VIEW_ID, MEMBER_ID, COUNT_TRANSACTIONS_IN_QUEUE, COUNT_TRANSACTIONS_CHECKED, 
    COUNT_CONFLICTS_DETECTED, COUNT_TRANSACTIONS_ROWS_VALIDATING, COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE, 
    COUNT_TRANSACTIONS_REMOTE_APPLIED, COUNT_TRANSACTIONS_LOCAL_PROPOSED, COUNT_TRANSACTIONS_LOCAL_ROLLBACK
  </sql>
  <sql id="Blob_Column_List">
    TRANSACTIONS_COMMITTED_ALL_MEMBERS, LAST_CONFLICT_FREE_TRANSACTION
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.zzp.mall.model.ReplicationGroupMemberStatsExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from replication_group_member_stats
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.zzp.mall.model.ReplicationGroupMemberStatsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from replication_group_member_stats
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.zzp.mall.model.ReplicationGroupMemberStatsExample">
    delete from replication_group_member_stats
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zzp.mall.model.ReplicationGroupMemberStats">
    insert into replication_group_member_stats (CHANNEL_NAME, VIEW_ID, MEMBER_ID, 
      COUNT_TRANSACTIONS_IN_QUEUE, COUNT_TRANSACTIONS_CHECKED, 
      COUNT_CONFLICTS_DETECTED, COUNT_TRANSACTIONS_ROWS_VALIDATING, 
      COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE, COUNT_TRANSACTIONS_REMOTE_APPLIED, 
      COUNT_TRANSACTIONS_LOCAL_PROPOSED, COUNT_TRANSACTIONS_LOCAL_ROLLBACK, 
      TRANSACTIONS_COMMITTED_ALL_MEMBERS, LAST_CONFLICT_FREE_TRANSACTION
      )
    values (#{channelName,jdbcType=CHAR}, #{viewId,jdbcType=CHAR}, #{memberId,jdbcType=CHAR}, 
      #{countTransactionsInQueue,jdbcType=BIGINT}, #{countTransactionsChecked,jdbcType=BIGINT}, 
      #{countConflictsDetected,jdbcType=BIGINT}, #{countTransactionsRowsValidating,jdbcType=BIGINT}, 
      #{countTransactionsRemoteInApplierQueue,jdbcType=BIGINT}, #{countTransactionsRemoteApplied,jdbcType=BIGINT}, 
      #{countTransactionsLocalProposed,jdbcType=BIGINT}, #{countTransactionsLocalRollback,jdbcType=BIGINT}, 
      #{transactionsCommittedAllMembers,jdbcType=LONGVARCHAR}, #{lastConflictFreeTransaction,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zzp.mall.model.ReplicationGroupMemberStats">
    insert into replication_group_member_stats
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="channelName != null">
        CHANNEL_NAME,
      </if>
      <if test="viewId != null">
        VIEW_ID,
      </if>
      <if test="memberId != null">
        MEMBER_ID,
      </if>
      <if test="countTransactionsInQueue != null">
        COUNT_TRANSACTIONS_IN_QUEUE,
      </if>
      <if test="countTransactionsChecked != null">
        COUNT_TRANSACTIONS_CHECKED,
      </if>
      <if test="countConflictsDetected != null">
        COUNT_CONFLICTS_DETECTED,
      </if>
      <if test="countTransactionsRowsValidating != null">
        COUNT_TRANSACTIONS_ROWS_VALIDATING,
      </if>
      <if test="countTransactionsRemoteInApplierQueue != null">
        COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE,
      </if>
      <if test="countTransactionsRemoteApplied != null">
        COUNT_TRANSACTIONS_REMOTE_APPLIED,
      </if>
      <if test="countTransactionsLocalProposed != null">
        COUNT_TRANSACTIONS_LOCAL_PROPOSED,
      </if>
      <if test="countTransactionsLocalRollback != null">
        COUNT_TRANSACTIONS_LOCAL_ROLLBACK,
      </if>
      <if test="transactionsCommittedAllMembers != null">
        TRANSACTIONS_COMMITTED_ALL_MEMBERS,
      </if>
      <if test="lastConflictFreeTransaction != null">
        LAST_CONFLICT_FREE_TRANSACTION,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="channelName != null">
        #{channelName,jdbcType=CHAR},
      </if>
      <if test="viewId != null">
        #{viewId,jdbcType=CHAR},
      </if>
      <if test="memberId != null">
        #{memberId,jdbcType=CHAR},
      </if>
      <if test="countTransactionsInQueue != null">
        #{countTransactionsInQueue,jdbcType=BIGINT},
      </if>
      <if test="countTransactionsChecked != null">
        #{countTransactionsChecked,jdbcType=BIGINT},
      </if>
      <if test="countConflictsDetected != null">
        #{countConflictsDetected,jdbcType=BIGINT},
      </if>
      <if test="countTransactionsRowsValidating != null">
        #{countTransactionsRowsValidating,jdbcType=BIGINT},
      </if>
      <if test="countTransactionsRemoteInApplierQueue != null">
        #{countTransactionsRemoteInApplierQueue,jdbcType=BIGINT},
      </if>
      <if test="countTransactionsRemoteApplied != null">
        #{countTransactionsRemoteApplied,jdbcType=BIGINT},
      </if>
      <if test="countTransactionsLocalProposed != null">
        #{countTransactionsLocalProposed,jdbcType=BIGINT},
      </if>
      <if test="countTransactionsLocalRollback != null">
        #{countTransactionsLocalRollback,jdbcType=BIGINT},
      </if>
      <if test="transactionsCommittedAllMembers != null">
        #{transactionsCommittedAllMembers,jdbcType=LONGVARCHAR},
      </if>
      <if test="lastConflictFreeTransaction != null">
        #{lastConflictFreeTransaction,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zzp.mall.model.ReplicationGroupMemberStatsExample" resultType="java.lang.Integer">
    select count(*) from replication_group_member_stats
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update replication_group_member_stats
    <set>
      <if test="record.channelName != null">
        CHANNEL_NAME = #{record.channelName,jdbcType=CHAR},
      </if>
      <if test="record.viewId != null">
        VIEW_ID = #{record.viewId,jdbcType=CHAR},
      </if>
      <if test="record.memberId != null">
        MEMBER_ID = #{record.memberId,jdbcType=CHAR},
      </if>
      <if test="record.countTransactionsInQueue != null">
        COUNT_TRANSACTIONS_IN_QUEUE = #{record.countTransactionsInQueue,jdbcType=BIGINT},
      </if>
      <if test="record.countTransactionsChecked != null">
        COUNT_TRANSACTIONS_CHECKED = #{record.countTransactionsChecked,jdbcType=BIGINT},
      </if>
      <if test="record.countConflictsDetected != null">
        COUNT_CONFLICTS_DETECTED = #{record.countConflictsDetected,jdbcType=BIGINT},
      </if>
      <if test="record.countTransactionsRowsValidating != null">
        COUNT_TRANSACTIONS_ROWS_VALIDATING = #{record.countTransactionsRowsValidating,jdbcType=BIGINT},
      </if>
      <if test="record.countTransactionsRemoteInApplierQueue != null">
        COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE = #{record.countTransactionsRemoteInApplierQueue,jdbcType=BIGINT},
      </if>
      <if test="record.countTransactionsRemoteApplied != null">
        COUNT_TRANSACTIONS_REMOTE_APPLIED = #{record.countTransactionsRemoteApplied,jdbcType=BIGINT},
      </if>
      <if test="record.countTransactionsLocalProposed != null">
        COUNT_TRANSACTIONS_LOCAL_PROPOSED = #{record.countTransactionsLocalProposed,jdbcType=BIGINT},
      </if>
      <if test="record.countTransactionsLocalRollback != null">
        COUNT_TRANSACTIONS_LOCAL_ROLLBACK = #{record.countTransactionsLocalRollback,jdbcType=BIGINT},
      </if>
      <if test="record.transactionsCommittedAllMembers != null">
        TRANSACTIONS_COMMITTED_ALL_MEMBERS = #{record.transactionsCommittedAllMembers,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.lastConflictFreeTransaction != null">
        LAST_CONFLICT_FREE_TRANSACTION = #{record.lastConflictFreeTransaction,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update replication_group_member_stats
    set CHANNEL_NAME = #{record.channelName,jdbcType=CHAR},
      VIEW_ID = #{record.viewId,jdbcType=CHAR},
      MEMBER_ID = #{record.memberId,jdbcType=CHAR},
      COUNT_TRANSACTIONS_IN_QUEUE = #{record.countTransactionsInQueue,jdbcType=BIGINT},
      COUNT_TRANSACTIONS_CHECKED = #{record.countTransactionsChecked,jdbcType=BIGINT},
      COUNT_CONFLICTS_DETECTED = #{record.countConflictsDetected,jdbcType=BIGINT},
      COUNT_TRANSACTIONS_ROWS_VALIDATING = #{record.countTransactionsRowsValidating,jdbcType=BIGINT},
      COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE = #{record.countTransactionsRemoteInApplierQueue,jdbcType=BIGINT},
      COUNT_TRANSACTIONS_REMOTE_APPLIED = #{record.countTransactionsRemoteApplied,jdbcType=BIGINT},
      COUNT_TRANSACTIONS_LOCAL_PROPOSED = #{record.countTransactionsLocalProposed,jdbcType=BIGINT},
      COUNT_TRANSACTIONS_LOCAL_ROLLBACK = #{record.countTransactionsLocalRollback,jdbcType=BIGINT},
      TRANSACTIONS_COMMITTED_ALL_MEMBERS = #{record.transactionsCommittedAllMembers,jdbcType=LONGVARCHAR},
      LAST_CONFLICT_FREE_TRANSACTION = #{record.lastConflictFreeTransaction,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update replication_group_member_stats
    set CHANNEL_NAME = #{record.channelName,jdbcType=CHAR},
      VIEW_ID = #{record.viewId,jdbcType=CHAR},
      MEMBER_ID = #{record.memberId,jdbcType=CHAR},
      COUNT_TRANSACTIONS_IN_QUEUE = #{record.countTransactionsInQueue,jdbcType=BIGINT},
      COUNT_TRANSACTIONS_CHECKED = #{record.countTransactionsChecked,jdbcType=BIGINT},
      COUNT_CONFLICTS_DETECTED = #{record.countConflictsDetected,jdbcType=BIGINT},
      COUNT_TRANSACTIONS_ROWS_VALIDATING = #{record.countTransactionsRowsValidating,jdbcType=BIGINT},
      COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE = #{record.countTransactionsRemoteInApplierQueue,jdbcType=BIGINT},
      COUNT_TRANSACTIONS_REMOTE_APPLIED = #{record.countTransactionsRemoteApplied,jdbcType=BIGINT},
      COUNT_TRANSACTIONS_LOCAL_PROPOSED = #{record.countTransactionsLocalProposed,jdbcType=BIGINT},
      COUNT_TRANSACTIONS_LOCAL_ROLLBACK = #{record.countTransactionsLocalRollback,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>