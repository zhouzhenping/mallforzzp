<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzp.mall.mapper.InnodbBufferPoolStatsMapper">
  <resultMap id="BaseResultMap" type="com.zzp.mall.model.InnodbBufferPoolStats">
    <result column="POOL_ID" jdbcType="BIGINT" property="poolId" />
    <result column="POOL_SIZE" jdbcType="BIGINT" property="poolSize" />
    <result column="FREE_BUFFERS" jdbcType="BIGINT" property="freeBuffers" />
    <result column="DATABASE_PAGES" jdbcType="BIGINT" property="databasePages" />
    <result column="OLD_DATABASE_PAGES" jdbcType="BIGINT" property="oldDatabasePages" />
    <result column="MODIFIED_DATABASE_PAGES" jdbcType="BIGINT" property="modifiedDatabasePages" />
    <result column="PENDING_DECOMPRESS" jdbcType="BIGINT" property="pendingDecompress" />
    <result column="PENDING_READS" jdbcType="BIGINT" property="pendingReads" />
    <result column="PENDING_FLUSH_LRU" jdbcType="BIGINT" property="pendingFlushLru" />
    <result column="PENDING_FLUSH_LIST" jdbcType="BIGINT" property="pendingFlushList" />
    <result column="PAGES_MADE_YOUNG" jdbcType="BIGINT" property="pagesMadeYoung" />
    <result column="PAGES_NOT_MADE_YOUNG" jdbcType="BIGINT" property="pagesNotMadeYoung" />
    <result column="PAGES_MADE_YOUNG_RATE" jdbcType="REAL" property="pagesMadeYoungRate" />
    <result column="PAGES_MADE_NOT_YOUNG_RATE" jdbcType="REAL" property="pagesMadeNotYoungRate" />
    <result column="NUMBER_PAGES_READ" jdbcType="BIGINT" property="numberPagesRead" />
    <result column="NUMBER_PAGES_CREATED" jdbcType="BIGINT" property="numberPagesCreated" />
    <result column="NUMBER_PAGES_WRITTEN" jdbcType="BIGINT" property="numberPagesWritten" />
    <result column="PAGES_READ_RATE" jdbcType="REAL" property="pagesReadRate" />
    <result column="PAGES_CREATE_RATE" jdbcType="REAL" property="pagesCreateRate" />
    <result column="PAGES_WRITTEN_RATE" jdbcType="REAL" property="pagesWrittenRate" />
    <result column="NUMBER_PAGES_GET" jdbcType="BIGINT" property="numberPagesGet" />
    <result column="HIT_RATE" jdbcType="BIGINT" property="hitRate" />
    <result column="YOUNG_MAKE_PER_THOUSAND_GETS" jdbcType="BIGINT" property="youngMakePerThousandGets" />
    <result column="NOT_YOUNG_MAKE_PER_THOUSAND_GETS" jdbcType="BIGINT" property="notYoungMakePerThousandGets" />
    <result column="NUMBER_PAGES_READ_AHEAD" jdbcType="BIGINT" property="numberPagesReadAhead" />
    <result column="NUMBER_READ_AHEAD_EVICTED" jdbcType="BIGINT" property="numberReadAheadEvicted" />
    <result column="READ_AHEAD_RATE" jdbcType="REAL" property="readAheadRate" />
    <result column="READ_AHEAD_EVICTED_RATE" jdbcType="REAL" property="readAheadEvictedRate" />
    <result column="LRU_IO_TOTAL" jdbcType="BIGINT" property="lruIoTotal" />
    <result column="LRU_IO_CURRENT" jdbcType="BIGINT" property="lruIoCurrent" />
    <result column="UNCOMPRESS_TOTAL" jdbcType="BIGINT" property="uncompressTotal" />
    <result column="UNCOMPRESS_CURRENT" jdbcType="BIGINT" property="uncompressCurrent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    POOL_ID, POOL_SIZE, FREE_BUFFERS, DATABASE_PAGES, OLD_DATABASE_PAGES, MODIFIED_DATABASE_PAGES, 
    PENDING_DECOMPRESS, PENDING_READS, PENDING_FLUSH_LRU, PENDING_FLUSH_LIST, PAGES_MADE_YOUNG, 
    PAGES_NOT_MADE_YOUNG, PAGES_MADE_YOUNG_RATE, PAGES_MADE_NOT_YOUNG_RATE, NUMBER_PAGES_READ, 
    NUMBER_PAGES_CREATED, NUMBER_PAGES_WRITTEN, PAGES_READ_RATE, PAGES_CREATE_RATE, PAGES_WRITTEN_RATE, 
    NUMBER_PAGES_GET, HIT_RATE, YOUNG_MAKE_PER_THOUSAND_GETS, NOT_YOUNG_MAKE_PER_THOUSAND_GETS, 
    NUMBER_PAGES_READ_AHEAD, NUMBER_READ_AHEAD_EVICTED, READ_AHEAD_RATE, READ_AHEAD_EVICTED_RATE, 
    LRU_IO_TOTAL, LRU_IO_CURRENT, UNCOMPRESS_TOTAL, UNCOMPRESS_CURRENT
  </sql>
  <select id="selectByExample" parameterType="com.zzp.mall.model.InnodbBufferPoolStatsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from INNODB_BUFFER_POOL_STATS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.zzp.mall.model.InnodbBufferPoolStatsExample">
    delete from INNODB_BUFFER_POOL_STATS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zzp.mall.model.InnodbBufferPoolStats">
    insert into INNODB_BUFFER_POOL_STATS (POOL_ID, POOL_SIZE, FREE_BUFFERS, 
      DATABASE_PAGES, OLD_DATABASE_PAGES, MODIFIED_DATABASE_PAGES, 
      PENDING_DECOMPRESS, PENDING_READS, PENDING_FLUSH_LRU, 
      PENDING_FLUSH_LIST, PAGES_MADE_YOUNG, PAGES_NOT_MADE_YOUNG, 
      PAGES_MADE_YOUNG_RATE, PAGES_MADE_NOT_YOUNG_RATE, NUMBER_PAGES_READ, 
      NUMBER_PAGES_CREATED, NUMBER_PAGES_WRITTEN, PAGES_READ_RATE, 
      PAGES_CREATE_RATE, PAGES_WRITTEN_RATE, NUMBER_PAGES_GET, 
      HIT_RATE, YOUNG_MAKE_PER_THOUSAND_GETS, NOT_YOUNG_MAKE_PER_THOUSAND_GETS, 
      NUMBER_PAGES_READ_AHEAD, NUMBER_READ_AHEAD_EVICTED, 
      READ_AHEAD_RATE, READ_AHEAD_EVICTED_RATE, LRU_IO_TOTAL, 
      LRU_IO_CURRENT, UNCOMPRESS_TOTAL, UNCOMPRESS_CURRENT
      )
    values (#{poolId,jdbcType=BIGINT}, #{poolSize,jdbcType=BIGINT}, #{freeBuffers,jdbcType=BIGINT}, 
      #{databasePages,jdbcType=BIGINT}, #{oldDatabasePages,jdbcType=BIGINT}, #{modifiedDatabasePages,jdbcType=BIGINT}, 
      #{pendingDecompress,jdbcType=BIGINT}, #{pendingReads,jdbcType=BIGINT}, #{pendingFlushLru,jdbcType=BIGINT}, 
      #{pendingFlushList,jdbcType=BIGINT}, #{pagesMadeYoung,jdbcType=BIGINT}, #{pagesNotMadeYoung,jdbcType=BIGINT}, 
      #{pagesMadeYoungRate,jdbcType=REAL}, #{pagesMadeNotYoungRate,jdbcType=REAL}, #{numberPagesRead,jdbcType=BIGINT}, 
      #{numberPagesCreated,jdbcType=BIGINT}, #{numberPagesWritten,jdbcType=BIGINT}, #{pagesReadRate,jdbcType=REAL}, 
      #{pagesCreateRate,jdbcType=REAL}, #{pagesWrittenRate,jdbcType=REAL}, #{numberPagesGet,jdbcType=BIGINT}, 
      #{hitRate,jdbcType=BIGINT}, #{youngMakePerThousandGets,jdbcType=BIGINT}, #{notYoungMakePerThousandGets,jdbcType=BIGINT}, 
      #{numberPagesReadAhead,jdbcType=BIGINT}, #{numberReadAheadEvicted,jdbcType=BIGINT}, 
      #{readAheadRate,jdbcType=REAL}, #{readAheadEvictedRate,jdbcType=REAL}, #{lruIoTotal,jdbcType=BIGINT}, 
      #{lruIoCurrent,jdbcType=BIGINT}, #{uncompressTotal,jdbcType=BIGINT}, #{uncompressCurrent,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zzp.mall.model.InnodbBufferPoolStats">
    insert into INNODB_BUFFER_POOL_STATS
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="poolId != null">
        POOL_ID,
      </if>
      <if test="poolSize != null">
        POOL_SIZE,
      </if>
      <if test="freeBuffers != null">
        FREE_BUFFERS,
      </if>
      <if test="databasePages != null">
        DATABASE_PAGES,
      </if>
      <if test="oldDatabasePages != null">
        OLD_DATABASE_PAGES,
      </if>
      <if test="modifiedDatabasePages != null">
        MODIFIED_DATABASE_PAGES,
      </if>
      <if test="pendingDecompress != null">
        PENDING_DECOMPRESS,
      </if>
      <if test="pendingReads != null">
        PENDING_READS,
      </if>
      <if test="pendingFlushLru != null">
        PENDING_FLUSH_LRU,
      </if>
      <if test="pendingFlushList != null">
        PENDING_FLUSH_LIST,
      </if>
      <if test="pagesMadeYoung != null">
        PAGES_MADE_YOUNG,
      </if>
      <if test="pagesNotMadeYoung != null">
        PAGES_NOT_MADE_YOUNG,
      </if>
      <if test="pagesMadeYoungRate != null">
        PAGES_MADE_YOUNG_RATE,
      </if>
      <if test="pagesMadeNotYoungRate != null">
        PAGES_MADE_NOT_YOUNG_RATE,
      </if>
      <if test="numberPagesRead != null">
        NUMBER_PAGES_READ,
      </if>
      <if test="numberPagesCreated != null">
        NUMBER_PAGES_CREATED,
      </if>
      <if test="numberPagesWritten != null">
        NUMBER_PAGES_WRITTEN,
      </if>
      <if test="pagesReadRate != null">
        PAGES_READ_RATE,
      </if>
      <if test="pagesCreateRate != null">
        PAGES_CREATE_RATE,
      </if>
      <if test="pagesWrittenRate != null">
        PAGES_WRITTEN_RATE,
      </if>
      <if test="numberPagesGet != null">
        NUMBER_PAGES_GET,
      </if>
      <if test="hitRate != null">
        HIT_RATE,
      </if>
      <if test="youngMakePerThousandGets != null">
        YOUNG_MAKE_PER_THOUSAND_GETS,
      </if>
      <if test="notYoungMakePerThousandGets != null">
        NOT_YOUNG_MAKE_PER_THOUSAND_GETS,
      </if>
      <if test="numberPagesReadAhead != null">
        NUMBER_PAGES_READ_AHEAD,
      </if>
      <if test="numberReadAheadEvicted != null">
        NUMBER_READ_AHEAD_EVICTED,
      </if>
      <if test="readAheadRate != null">
        READ_AHEAD_RATE,
      </if>
      <if test="readAheadEvictedRate != null">
        READ_AHEAD_EVICTED_RATE,
      </if>
      <if test="lruIoTotal != null">
        LRU_IO_TOTAL,
      </if>
      <if test="lruIoCurrent != null">
        LRU_IO_CURRENT,
      </if>
      <if test="uncompressTotal != null">
        UNCOMPRESS_TOTAL,
      </if>
      <if test="uncompressCurrent != null">
        UNCOMPRESS_CURRENT,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="poolId != null">
        #{poolId,jdbcType=BIGINT},
      </if>
      <if test="poolSize != null">
        #{poolSize,jdbcType=BIGINT},
      </if>
      <if test="freeBuffers != null">
        #{freeBuffers,jdbcType=BIGINT},
      </if>
      <if test="databasePages != null">
        #{databasePages,jdbcType=BIGINT},
      </if>
      <if test="oldDatabasePages != null">
        #{oldDatabasePages,jdbcType=BIGINT},
      </if>
      <if test="modifiedDatabasePages != null">
        #{modifiedDatabasePages,jdbcType=BIGINT},
      </if>
      <if test="pendingDecompress != null">
        #{pendingDecompress,jdbcType=BIGINT},
      </if>
      <if test="pendingReads != null">
        #{pendingReads,jdbcType=BIGINT},
      </if>
      <if test="pendingFlushLru != null">
        #{pendingFlushLru,jdbcType=BIGINT},
      </if>
      <if test="pendingFlushList != null">
        #{pendingFlushList,jdbcType=BIGINT},
      </if>
      <if test="pagesMadeYoung != null">
        #{pagesMadeYoung,jdbcType=BIGINT},
      </if>
      <if test="pagesNotMadeYoung != null">
        #{pagesNotMadeYoung,jdbcType=BIGINT},
      </if>
      <if test="pagesMadeYoungRate != null">
        #{pagesMadeYoungRate,jdbcType=REAL},
      </if>
      <if test="pagesMadeNotYoungRate != null">
        #{pagesMadeNotYoungRate,jdbcType=REAL},
      </if>
      <if test="numberPagesRead != null">
        #{numberPagesRead,jdbcType=BIGINT},
      </if>
      <if test="numberPagesCreated != null">
        #{numberPagesCreated,jdbcType=BIGINT},
      </if>
      <if test="numberPagesWritten != null">
        #{numberPagesWritten,jdbcType=BIGINT},
      </if>
      <if test="pagesReadRate != null">
        #{pagesReadRate,jdbcType=REAL},
      </if>
      <if test="pagesCreateRate != null">
        #{pagesCreateRate,jdbcType=REAL},
      </if>
      <if test="pagesWrittenRate != null">
        #{pagesWrittenRate,jdbcType=REAL},
      </if>
      <if test="numberPagesGet != null">
        #{numberPagesGet,jdbcType=BIGINT},
      </if>
      <if test="hitRate != null">
        #{hitRate,jdbcType=BIGINT},
      </if>
      <if test="youngMakePerThousandGets != null">
        #{youngMakePerThousandGets,jdbcType=BIGINT},
      </if>
      <if test="notYoungMakePerThousandGets != null">
        #{notYoungMakePerThousandGets,jdbcType=BIGINT},
      </if>
      <if test="numberPagesReadAhead != null">
        #{numberPagesReadAhead,jdbcType=BIGINT},
      </if>
      <if test="numberReadAheadEvicted != null">
        #{numberReadAheadEvicted,jdbcType=BIGINT},
      </if>
      <if test="readAheadRate != null">
        #{readAheadRate,jdbcType=REAL},
      </if>
      <if test="readAheadEvictedRate != null">
        #{readAheadEvictedRate,jdbcType=REAL},
      </if>
      <if test="lruIoTotal != null">
        #{lruIoTotal,jdbcType=BIGINT},
      </if>
      <if test="lruIoCurrent != null">
        #{lruIoCurrent,jdbcType=BIGINT},
      </if>
      <if test="uncompressTotal != null">
        #{uncompressTotal,jdbcType=BIGINT},
      </if>
      <if test="uncompressCurrent != null">
        #{uncompressCurrent,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zzp.mall.model.InnodbBufferPoolStatsExample" resultType="java.lang.Integer">
    select count(*) from INNODB_BUFFER_POOL_STATS
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update INNODB_BUFFER_POOL_STATS
    <set>
      <if test="record.poolId != null">
        POOL_ID = #{record.poolId,jdbcType=BIGINT},
      </if>
      <if test="record.poolSize != null">
        POOL_SIZE = #{record.poolSize,jdbcType=BIGINT},
      </if>
      <if test="record.freeBuffers != null">
        FREE_BUFFERS = #{record.freeBuffers,jdbcType=BIGINT},
      </if>
      <if test="record.databasePages != null">
        DATABASE_PAGES = #{record.databasePages,jdbcType=BIGINT},
      </if>
      <if test="record.oldDatabasePages != null">
        OLD_DATABASE_PAGES = #{record.oldDatabasePages,jdbcType=BIGINT},
      </if>
      <if test="record.modifiedDatabasePages != null">
        MODIFIED_DATABASE_PAGES = #{record.modifiedDatabasePages,jdbcType=BIGINT},
      </if>
      <if test="record.pendingDecompress != null">
        PENDING_DECOMPRESS = #{record.pendingDecompress,jdbcType=BIGINT},
      </if>
      <if test="record.pendingReads != null">
        PENDING_READS = #{record.pendingReads,jdbcType=BIGINT},
      </if>
      <if test="record.pendingFlushLru != null">
        PENDING_FLUSH_LRU = #{record.pendingFlushLru,jdbcType=BIGINT},
      </if>
      <if test="record.pendingFlushList != null">
        PENDING_FLUSH_LIST = #{record.pendingFlushList,jdbcType=BIGINT},
      </if>
      <if test="record.pagesMadeYoung != null">
        PAGES_MADE_YOUNG = #{record.pagesMadeYoung,jdbcType=BIGINT},
      </if>
      <if test="record.pagesNotMadeYoung != null">
        PAGES_NOT_MADE_YOUNG = #{record.pagesNotMadeYoung,jdbcType=BIGINT},
      </if>
      <if test="record.pagesMadeYoungRate != null">
        PAGES_MADE_YOUNG_RATE = #{record.pagesMadeYoungRate,jdbcType=REAL},
      </if>
      <if test="record.pagesMadeNotYoungRate != null">
        PAGES_MADE_NOT_YOUNG_RATE = #{record.pagesMadeNotYoungRate,jdbcType=REAL},
      </if>
      <if test="record.numberPagesRead != null">
        NUMBER_PAGES_READ = #{record.numberPagesRead,jdbcType=BIGINT},
      </if>
      <if test="record.numberPagesCreated != null">
        NUMBER_PAGES_CREATED = #{record.numberPagesCreated,jdbcType=BIGINT},
      </if>
      <if test="record.numberPagesWritten != null">
        NUMBER_PAGES_WRITTEN = #{record.numberPagesWritten,jdbcType=BIGINT},
      </if>
      <if test="record.pagesReadRate != null">
        PAGES_READ_RATE = #{record.pagesReadRate,jdbcType=REAL},
      </if>
      <if test="record.pagesCreateRate != null">
        PAGES_CREATE_RATE = #{record.pagesCreateRate,jdbcType=REAL},
      </if>
      <if test="record.pagesWrittenRate != null">
        PAGES_WRITTEN_RATE = #{record.pagesWrittenRate,jdbcType=REAL},
      </if>
      <if test="record.numberPagesGet != null">
        NUMBER_PAGES_GET = #{record.numberPagesGet,jdbcType=BIGINT},
      </if>
      <if test="record.hitRate != null">
        HIT_RATE = #{record.hitRate,jdbcType=BIGINT},
      </if>
      <if test="record.youngMakePerThousandGets != null">
        YOUNG_MAKE_PER_THOUSAND_GETS = #{record.youngMakePerThousandGets,jdbcType=BIGINT},
      </if>
      <if test="record.notYoungMakePerThousandGets != null">
        NOT_YOUNG_MAKE_PER_THOUSAND_GETS = #{record.notYoungMakePerThousandGets,jdbcType=BIGINT},
      </if>
      <if test="record.numberPagesReadAhead != null">
        NUMBER_PAGES_READ_AHEAD = #{record.numberPagesReadAhead,jdbcType=BIGINT},
      </if>
      <if test="record.numberReadAheadEvicted != null">
        NUMBER_READ_AHEAD_EVICTED = #{record.numberReadAheadEvicted,jdbcType=BIGINT},
      </if>
      <if test="record.readAheadRate != null">
        READ_AHEAD_RATE = #{record.readAheadRate,jdbcType=REAL},
      </if>
      <if test="record.readAheadEvictedRate != null">
        READ_AHEAD_EVICTED_RATE = #{record.readAheadEvictedRate,jdbcType=REAL},
      </if>
      <if test="record.lruIoTotal != null">
        LRU_IO_TOTAL = #{record.lruIoTotal,jdbcType=BIGINT},
      </if>
      <if test="record.lruIoCurrent != null">
        LRU_IO_CURRENT = #{record.lruIoCurrent,jdbcType=BIGINT},
      </if>
      <if test="record.uncompressTotal != null">
        UNCOMPRESS_TOTAL = #{record.uncompressTotal,jdbcType=BIGINT},
      </if>
      <if test="record.uncompressCurrent != null">
        UNCOMPRESS_CURRENT = #{record.uncompressCurrent,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update INNODB_BUFFER_POOL_STATS
    set POOL_ID = #{record.poolId,jdbcType=BIGINT},
      POOL_SIZE = #{record.poolSize,jdbcType=BIGINT},
      FREE_BUFFERS = #{record.freeBuffers,jdbcType=BIGINT},
      DATABASE_PAGES = #{record.databasePages,jdbcType=BIGINT},
      OLD_DATABASE_PAGES = #{record.oldDatabasePages,jdbcType=BIGINT},
      MODIFIED_DATABASE_PAGES = #{record.modifiedDatabasePages,jdbcType=BIGINT},
      PENDING_DECOMPRESS = #{record.pendingDecompress,jdbcType=BIGINT},
      PENDING_READS = #{record.pendingReads,jdbcType=BIGINT},
      PENDING_FLUSH_LRU = #{record.pendingFlushLru,jdbcType=BIGINT},
      PENDING_FLUSH_LIST = #{record.pendingFlushList,jdbcType=BIGINT},
      PAGES_MADE_YOUNG = #{record.pagesMadeYoung,jdbcType=BIGINT},
      PAGES_NOT_MADE_YOUNG = #{record.pagesNotMadeYoung,jdbcType=BIGINT},
      PAGES_MADE_YOUNG_RATE = #{record.pagesMadeYoungRate,jdbcType=REAL},
      PAGES_MADE_NOT_YOUNG_RATE = #{record.pagesMadeNotYoungRate,jdbcType=REAL},
      NUMBER_PAGES_READ = #{record.numberPagesRead,jdbcType=BIGINT},
      NUMBER_PAGES_CREATED = #{record.numberPagesCreated,jdbcType=BIGINT},
      NUMBER_PAGES_WRITTEN = #{record.numberPagesWritten,jdbcType=BIGINT},
      PAGES_READ_RATE = #{record.pagesReadRate,jdbcType=REAL},
      PAGES_CREATE_RATE = #{record.pagesCreateRate,jdbcType=REAL},
      PAGES_WRITTEN_RATE = #{record.pagesWrittenRate,jdbcType=REAL},
      NUMBER_PAGES_GET = #{record.numberPagesGet,jdbcType=BIGINT},
      HIT_RATE = #{record.hitRate,jdbcType=BIGINT},
      YOUNG_MAKE_PER_THOUSAND_GETS = #{record.youngMakePerThousandGets,jdbcType=BIGINT},
      NOT_YOUNG_MAKE_PER_THOUSAND_GETS = #{record.notYoungMakePerThousandGets,jdbcType=BIGINT},
      NUMBER_PAGES_READ_AHEAD = #{record.numberPagesReadAhead,jdbcType=BIGINT},
      NUMBER_READ_AHEAD_EVICTED = #{record.numberReadAheadEvicted,jdbcType=BIGINT},
      READ_AHEAD_RATE = #{record.readAheadRate,jdbcType=REAL},
      READ_AHEAD_EVICTED_RATE = #{record.readAheadEvictedRate,jdbcType=REAL},
      LRU_IO_TOTAL = #{record.lruIoTotal,jdbcType=BIGINT},
      LRU_IO_CURRENT = #{record.lruIoCurrent,jdbcType=BIGINT},
      UNCOMPRESS_TOTAL = #{record.uncompressTotal,jdbcType=BIGINT},
      UNCOMPRESS_CURRENT = #{record.uncompressCurrent,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>