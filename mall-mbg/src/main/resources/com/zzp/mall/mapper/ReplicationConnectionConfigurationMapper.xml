<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzp.mall.mapper.ReplicationConnectionConfigurationMapper">
  <resultMap id="BaseResultMap" type="com.zzp.mall.model.ReplicationConnectionConfiguration">
    <id column="CHANNEL_NAME" jdbcType="CHAR" property="channelName" />
    <result column="HOST" jdbcType="CHAR" property="host" />
    <result column="PORT" jdbcType="INTEGER" property="port" />
    <result column="USER" jdbcType="CHAR" property="user" />
    <result column="NETWORK_INTERFACE" jdbcType="CHAR" property="networkInterface" />
    <result column="AUTO_POSITION" jdbcType="CHAR" property="autoPosition" />
    <result column="SSL_ALLOWED" jdbcType="CHAR" property="sslAllowed" />
    <result column="SSL_CA_FILE" jdbcType="VARCHAR" property="sslCaFile" />
    <result column="SSL_CA_PATH" jdbcType="VARCHAR" property="sslCaPath" />
    <result column="SSL_CERTIFICATE" jdbcType="VARCHAR" property="sslCertificate" />
    <result column="SSL_CIPHER" jdbcType="VARCHAR" property="sslCipher" />
    <result column="SSL_KEY" jdbcType="VARCHAR" property="sslKey" />
    <result column="SSL_VERIFY_SERVER_CERTIFICATE" jdbcType="CHAR" property="sslVerifyServerCertificate" />
    <result column="SSL_CRL_FILE" jdbcType="VARCHAR" property="sslCrlFile" />
    <result column="SSL_CRL_PATH" jdbcType="VARCHAR" property="sslCrlPath" />
    <result column="CONNECTION_RETRY_INTERVAL" jdbcType="INTEGER" property="connectionRetryInterval" />
    <result column="CONNECTION_RETRY_COUNT" jdbcType="BIGINT" property="connectionRetryCount" />
    <result column="HEARTBEAT_INTERVAL" jdbcType="DOUBLE" property="heartbeatInterval" />
    <result column="TLS_VERSION" jdbcType="VARCHAR" property="tlsVersion" />
    <result column="PUBLIC_KEY_PATH" jdbcType="VARCHAR" property="publicKeyPath" />
    <result column="GET_PUBLIC_KEY" jdbcType="CHAR" property="getPublicKey" />
    <result column="NETWORK_NAMESPACE" jdbcType="VARCHAR" property="networkNamespace" />
    <result column="COMPRESSION_ALGORITHM" jdbcType="CHAR" property="compressionAlgorithm" />
    <result column="ZSTD_COMPRESSION_LEVEL" jdbcType="INTEGER" property="zstdCompressionLevel" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.zzp.mall.model.ReplicationConnectionConfiguration">
    <result column="TLS_CIPHERSUITES" jdbcType="LONGVARCHAR" property="tlsCiphersuites" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    CHANNEL_NAME, HOST, PORT, USER, NETWORK_INTERFACE, AUTO_POSITION, SSL_ALLOWED, SSL_CA_FILE, 
    SSL_CA_PATH, SSL_CERTIFICATE, SSL_CIPHER, SSL_KEY, SSL_VERIFY_SERVER_CERTIFICATE, 
    SSL_CRL_FILE, SSL_CRL_PATH, CONNECTION_RETRY_INTERVAL, CONNECTION_RETRY_COUNT, HEARTBEAT_INTERVAL, 
    TLS_VERSION, PUBLIC_KEY_PATH, GET_PUBLIC_KEY, NETWORK_NAMESPACE, COMPRESSION_ALGORITHM, 
    ZSTD_COMPRESSION_LEVEL
  </sql>
  <sql id="Blob_Column_List">
    TLS_CIPHERSUITES
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.zzp.mall.model.ReplicationConnectionConfigurationExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from replication_connection_configuration
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.zzp.mall.model.ReplicationConnectionConfigurationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from replication_connection_configuration
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from replication_connection_configuration
    where CHANNEL_NAME = #{channelName,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from replication_connection_configuration
    where CHANNEL_NAME = #{channelName,jdbcType=CHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.zzp.mall.model.ReplicationConnectionConfigurationExample">
    delete from replication_connection_configuration
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zzp.mall.model.ReplicationConnectionConfiguration">
    insert into replication_connection_configuration (CHANNEL_NAME, HOST, PORT, 
      USER, NETWORK_INTERFACE, AUTO_POSITION, 
      SSL_ALLOWED, SSL_CA_FILE, SSL_CA_PATH, 
      SSL_CERTIFICATE, SSL_CIPHER, SSL_KEY, 
      SSL_VERIFY_SERVER_CERTIFICATE, SSL_CRL_FILE, SSL_CRL_PATH, 
      CONNECTION_RETRY_INTERVAL, CONNECTION_RETRY_COUNT, 
      HEARTBEAT_INTERVAL, TLS_VERSION, PUBLIC_KEY_PATH, 
      GET_PUBLIC_KEY, NETWORK_NAMESPACE, COMPRESSION_ALGORITHM, 
      ZSTD_COMPRESSION_LEVEL, TLS_CIPHERSUITES
      )
    values (#{channelName,jdbcType=CHAR}, #{host,jdbcType=CHAR}, #{port,jdbcType=INTEGER}, 
      #{user,jdbcType=CHAR}, #{networkInterface,jdbcType=CHAR}, #{autoPosition,jdbcType=CHAR}, 
      #{sslAllowed,jdbcType=CHAR}, #{sslCaFile,jdbcType=VARCHAR}, #{sslCaPath,jdbcType=VARCHAR}, 
      #{sslCertificate,jdbcType=VARCHAR}, #{sslCipher,jdbcType=VARCHAR}, #{sslKey,jdbcType=VARCHAR}, 
      #{sslVerifyServerCertificate,jdbcType=CHAR}, #{sslCrlFile,jdbcType=VARCHAR}, #{sslCrlPath,jdbcType=VARCHAR}, 
      #{connectionRetryInterval,jdbcType=INTEGER}, #{connectionRetryCount,jdbcType=BIGINT}, 
      #{heartbeatInterval,jdbcType=DOUBLE}, #{tlsVersion,jdbcType=VARCHAR}, #{publicKeyPath,jdbcType=VARCHAR}, 
      #{getPublicKey,jdbcType=CHAR}, #{networkNamespace,jdbcType=VARCHAR}, #{compressionAlgorithm,jdbcType=CHAR}, 
      #{zstdCompressionLevel,jdbcType=INTEGER}, #{tlsCiphersuites,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zzp.mall.model.ReplicationConnectionConfiguration">
    insert into replication_connection_configuration
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="channelName != null">
        CHANNEL_NAME,
      </if>
      <if test="host != null">
        HOST,
      </if>
      <if test="port != null">
        PORT,
      </if>
      <if test="user != null">
        USER,
      </if>
      <if test="networkInterface != null">
        NETWORK_INTERFACE,
      </if>
      <if test="autoPosition != null">
        AUTO_POSITION,
      </if>
      <if test="sslAllowed != null">
        SSL_ALLOWED,
      </if>
      <if test="sslCaFile != null">
        SSL_CA_FILE,
      </if>
      <if test="sslCaPath != null">
        SSL_CA_PATH,
      </if>
      <if test="sslCertificate != null">
        SSL_CERTIFICATE,
      </if>
      <if test="sslCipher != null">
        SSL_CIPHER,
      </if>
      <if test="sslKey != null">
        SSL_KEY,
      </if>
      <if test="sslVerifyServerCertificate != null">
        SSL_VERIFY_SERVER_CERTIFICATE,
      </if>
      <if test="sslCrlFile != null">
        SSL_CRL_FILE,
      </if>
      <if test="sslCrlPath != null">
        SSL_CRL_PATH,
      </if>
      <if test="connectionRetryInterval != null">
        CONNECTION_RETRY_INTERVAL,
      </if>
      <if test="connectionRetryCount != null">
        CONNECTION_RETRY_COUNT,
      </if>
      <if test="heartbeatInterval != null">
        HEARTBEAT_INTERVAL,
      </if>
      <if test="tlsVersion != null">
        TLS_VERSION,
      </if>
      <if test="publicKeyPath != null">
        PUBLIC_KEY_PATH,
      </if>
      <if test="getPublicKey != null">
        GET_PUBLIC_KEY,
      </if>
      <if test="networkNamespace != null">
        NETWORK_NAMESPACE,
      </if>
      <if test="compressionAlgorithm != null">
        COMPRESSION_ALGORITHM,
      </if>
      <if test="zstdCompressionLevel != null">
        ZSTD_COMPRESSION_LEVEL,
      </if>
      <if test="tlsCiphersuites != null">
        TLS_CIPHERSUITES,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="channelName != null">
        #{channelName,jdbcType=CHAR},
      </if>
      <if test="host != null">
        #{host,jdbcType=CHAR},
      </if>
      <if test="port != null">
        #{port,jdbcType=INTEGER},
      </if>
      <if test="user != null">
        #{user,jdbcType=CHAR},
      </if>
      <if test="networkInterface != null">
        #{networkInterface,jdbcType=CHAR},
      </if>
      <if test="autoPosition != null">
        #{autoPosition,jdbcType=CHAR},
      </if>
      <if test="sslAllowed != null">
        #{sslAllowed,jdbcType=CHAR},
      </if>
      <if test="sslCaFile != null">
        #{sslCaFile,jdbcType=VARCHAR},
      </if>
      <if test="sslCaPath != null">
        #{sslCaPath,jdbcType=VARCHAR},
      </if>
      <if test="sslCertificate != null">
        #{sslCertificate,jdbcType=VARCHAR},
      </if>
      <if test="sslCipher != null">
        #{sslCipher,jdbcType=VARCHAR},
      </if>
      <if test="sslKey != null">
        #{sslKey,jdbcType=VARCHAR},
      </if>
      <if test="sslVerifyServerCertificate != null">
        #{sslVerifyServerCertificate,jdbcType=CHAR},
      </if>
      <if test="sslCrlFile != null">
        #{sslCrlFile,jdbcType=VARCHAR},
      </if>
      <if test="sslCrlPath != null">
        #{sslCrlPath,jdbcType=VARCHAR},
      </if>
      <if test="connectionRetryInterval != null">
        #{connectionRetryInterval,jdbcType=INTEGER},
      </if>
      <if test="connectionRetryCount != null">
        #{connectionRetryCount,jdbcType=BIGINT},
      </if>
      <if test="heartbeatInterval != null">
        #{heartbeatInterval,jdbcType=DOUBLE},
      </if>
      <if test="tlsVersion != null">
        #{tlsVersion,jdbcType=VARCHAR},
      </if>
      <if test="publicKeyPath != null">
        #{publicKeyPath,jdbcType=VARCHAR},
      </if>
      <if test="getPublicKey != null">
        #{getPublicKey,jdbcType=CHAR},
      </if>
      <if test="networkNamespace != null">
        #{networkNamespace,jdbcType=VARCHAR},
      </if>
      <if test="compressionAlgorithm != null">
        #{compressionAlgorithm,jdbcType=CHAR},
      </if>
      <if test="zstdCompressionLevel != null">
        #{zstdCompressionLevel,jdbcType=INTEGER},
      </if>
      <if test="tlsCiphersuites != null">
        #{tlsCiphersuites,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zzp.mall.model.ReplicationConnectionConfigurationExample" resultType="java.lang.Integer">
    select count(*) from replication_connection_configuration
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update replication_connection_configuration
    <set>
      <if test="record.channelName != null">
        CHANNEL_NAME = #{record.channelName,jdbcType=CHAR},
      </if>
      <if test="record.host != null">
        HOST = #{record.host,jdbcType=CHAR},
      </if>
      <if test="record.port != null">
        PORT = #{record.port,jdbcType=INTEGER},
      </if>
      <if test="record.user != null">
        USER = #{record.user,jdbcType=CHAR},
      </if>
      <if test="record.networkInterface != null">
        NETWORK_INTERFACE = #{record.networkInterface,jdbcType=CHAR},
      </if>
      <if test="record.autoPosition != null">
        AUTO_POSITION = #{record.autoPosition,jdbcType=CHAR},
      </if>
      <if test="record.sslAllowed != null">
        SSL_ALLOWED = #{record.sslAllowed,jdbcType=CHAR},
      </if>
      <if test="record.sslCaFile != null">
        SSL_CA_FILE = #{record.sslCaFile,jdbcType=VARCHAR},
      </if>
      <if test="record.sslCaPath != null">
        SSL_CA_PATH = #{record.sslCaPath,jdbcType=VARCHAR},
      </if>
      <if test="record.sslCertificate != null">
        SSL_CERTIFICATE = #{record.sslCertificate,jdbcType=VARCHAR},
      </if>
      <if test="record.sslCipher != null">
        SSL_CIPHER = #{record.sslCipher,jdbcType=VARCHAR},
      </if>
      <if test="record.sslKey != null">
        SSL_KEY = #{record.sslKey,jdbcType=VARCHAR},
      </if>
      <if test="record.sslVerifyServerCertificate != null">
        SSL_VERIFY_SERVER_CERTIFICATE = #{record.sslVerifyServerCertificate,jdbcType=CHAR},
      </if>
      <if test="record.sslCrlFile != null">
        SSL_CRL_FILE = #{record.sslCrlFile,jdbcType=VARCHAR},
      </if>
      <if test="record.sslCrlPath != null">
        SSL_CRL_PATH = #{record.sslCrlPath,jdbcType=VARCHAR},
      </if>
      <if test="record.connectionRetryInterval != null">
        CONNECTION_RETRY_INTERVAL = #{record.connectionRetryInterval,jdbcType=INTEGER},
      </if>
      <if test="record.connectionRetryCount != null">
        CONNECTION_RETRY_COUNT = #{record.connectionRetryCount,jdbcType=BIGINT},
      </if>
      <if test="record.heartbeatInterval != null">
        HEARTBEAT_INTERVAL = #{record.heartbeatInterval,jdbcType=DOUBLE},
      </if>
      <if test="record.tlsVersion != null">
        TLS_VERSION = #{record.tlsVersion,jdbcType=VARCHAR},
      </if>
      <if test="record.publicKeyPath != null">
        PUBLIC_KEY_PATH = #{record.publicKeyPath,jdbcType=VARCHAR},
      </if>
      <if test="record.getPublicKey != null">
        GET_PUBLIC_KEY = #{record.getPublicKey,jdbcType=CHAR},
      </if>
      <if test="record.networkNamespace != null">
        NETWORK_NAMESPACE = #{record.networkNamespace,jdbcType=VARCHAR},
      </if>
      <if test="record.compressionAlgorithm != null">
        COMPRESSION_ALGORITHM = #{record.compressionAlgorithm,jdbcType=CHAR},
      </if>
      <if test="record.zstdCompressionLevel != null">
        ZSTD_COMPRESSION_LEVEL = #{record.zstdCompressionLevel,jdbcType=INTEGER},
      </if>
      <if test="record.tlsCiphersuites != null">
        TLS_CIPHERSUITES = #{record.tlsCiphersuites,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update replication_connection_configuration
    set CHANNEL_NAME = #{record.channelName,jdbcType=CHAR},
      HOST = #{record.host,jdbcType=CHAR},
      PORT = #{record.port,jdbcType=INTEGER},
      USER = #{record.user,jdbcType=CHAR},
      NETWORK_INTERFACE = #{record.networkInterface,jdbcType=CHAR},
      AUTO_POSITION = #{record.autoPosition,jdbcType=CHAR},
      SSL_ALLOWED = #{record.sslAllowed,jdbcType=CHAR},
      SSL_CA_FILE = #{record.sslCaFile,jdbcType=VARCHAR},
      SSL_CA_PATH = #{record.sslCaPath,jdbcType=VARCHAR},
      SSL_CERTIFICATE = #{record.sslCertificate,jdbcType=VARCHAR},
      SSL_CIPHER = #{record.sslCipher,jdbcType=VARCHAR},
      SSL_KEY = #{record.sslKey,jdbcType=VARCHAR},
      SSL_VERIFY_SERVER_CERTIFICATE = #{record.sslVerifyServerCertificate,jdbcType=CHAR},
      SSL_CRL_FILE = #{record.sslCrlFile,jdbcType=VARCHAR},
      SSL_CRL_PATH = #{record.sslCrlPath,jdbcType=VARCHAR},
      CONNECTION_RETRY_INTERVAL = #{record.connectionRetryInterval,jdbcType=INTEGER},
      CONNECTION_RETRY_COUNT = #{record.connectionRetryCount,jdbcType=BIGINT},
      HEARTBEAT_INTERVAL = #{record.heartbeatInterval,jdbcType=DOUBLE},
      TLS_VERSION = #{record.tlsVersion,jdbcType=VARCHAR},
      PUBLIC_KEY_PATH = #{record.publicKeyPath,jdbcType=VARCHAR},
      GET_PUBLIC_KEY = #{record.getPublicKey,jdbcType=CHAR},
      NETWORK_NAMESPACE = #{record.networkNamespace,jdbcType=VARCHAR},
      COMPRESSION_ALGORITHM = #{record.compressionAlgorithm,jdbcType=CHAR},
      ZSTD_COMPRESSION_LEVEL = #{record.zstdCompressionLevel,jdbcType=INTEGER},
      TLS_CIPHERSUITES = #{record.tlsCiphersuites,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update replication_connection_configuration
    set CHANNEL_NAME = #{record.channelName,jdbcType=CHAR},
      HOST = #{record.host,jdbcType=CHAR},
      PORT = #{record.port,jdbcType=INTEGER},
      USER = #{record.user,jdbcType=CHAR},
      NETWORK_INTERFACE = #{record.networkInterface,jdbcType=CHAR},
      AUTO_POSITION = #{record.autoPosition,jdbcType=CHAR},
      SSL_ALLOWED = #{record.sslAllowed,jdbcType=CHAR},
      SSL_CA_FILE = #{record.sslCaFile,jdbcType=VARCHAR},
      SSL_CA_PATH = #{record.sslCaPath,jdbcType=VARCHAR},
      SSL_CERTIFICATE = #{record.sslCertificate,jdbcType=VARCHAR},
      SSL_CIPHER = #{record.sslCipher,jdbcType=VARCHAR},
      SSL_KEY = #{record.sslKey,jdbcType=VARCHAR},
      SSL_VERIFY_SERVER_CERTIFICATE = #{record.sslVerifyServerCertificate,jdbcType=CHAR},
      SSL_CRL_FILE = #{record.sslCrlFile,jdbcType=VARCHAR},
      SSL_CRL_PATH = #{record.sslCrlPath,jdbcType=VARCHAR},
      CONNECTION_RETRY_INTERVAL = #{record.connectionRetryInterval,jdbcType=INTEGER},
      CONNECTION_RETRY_COUNT = #{record.connectionRetryCount,jdbcType=BIGINT},
      HEARTBEAT_INTERVAL = #{record.heartbeatInterval,jdbcType=DOUBLE},
      TLS_VERSION = #{record.tlsVersion,jdbcType=VARCHAR},
      PUBLIC_KEY_PATH = #{record.publicKeyPath,jdbcType=VARCHAR},
      GET_PUBLIC_KEY = #{record.getPublicKey,jdbcType=CHAR},
      NETWORK_NAMESPACE = #{record.networkNamespace,jdbcType=VARCHAR},
      COMPRESSION_ALGORITHM = #{record.compressionAlgorithm,jdbcType=CHAR},
      ZSTD_COMPRESSION_LEVEL = #{record.zstdCompressionLevel,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zzp.mall.model.ReplicationConnectionConfiguration">
    update replication_connection_configuration
    <set>
      <if test="host != null">
        HOST = #{host,jdbcType=CHAR},
      </if>
      <if test="port != null">
        PORT = #{port,jdbcType=INTEGER},
      </if>
      <if test="user != null">
        USER = #{user,jdbcType=CHAR},
      </if>
      <if test="networkInterface != null">
        NETWORK_INTERFACE = #{networkInterface,jdbcType=CHAR},
      </if>
      <if test="autoPosition != null">
        AUTO_POSITION = #{autoPosition,jdbcType=CHAR},
      </if>
      <if test="sslAllowed != null">
        SSL_ALLOWED = #{sslAllowed,jdbcType=CHAR},
      </if>
      <if test="sslCaFile != null">
        SSL_CA_FILE = #{sslCaFile,jdbcType=VARCHAR},
      </if>
      <if test="sslCaPath != null">
        SSL_CA_PATH = #{sslCaPath,jdbcType=VARCHAR},
      </if>
      <if test="sslCertificate != null">
        SSL_CERTIFICATE = #{sslCertificate,jdbcType=VARCHAR},
      </if>
      <if test="sslCipher != null">
        SSL_CIPHER = #{sslCipher,jdbcType=VARCHAR},
      </if>
      <if test="sslKey != null">
        SSL_KEY = #{sslKey,jdbcType=VARCHAR},
      </if>
      <if test="sslVerifyServerCertificate != null">
        SSL_VERIFY_SERVER_CERTIFICATE = #{sslVerifyServerCertificate,jdbcType=CHAR},
      </if>
      <if test="sslCrlFile != null">
        SSL_CRL_FILE = #{sslCrlFile,jdbcType=VARCHAR},
      </if>
      <if test="sslCrlPath != null">
        SSL_CRL_PATH = #{sslCrlPath,jdbcType=VARCHAR},
      </if>
      <if test="connectionRetryInterval != null">
        CONNECTION_RETRY_INTERVAL = #{connectionRetryInterval,jdbcType=INTEGER},
      </if>
      <if test="connectionRetryCount != null">
        CONNECTION_RETRY_COUNT = #{connectionRetryCount,jdbcType=BIGINT},
      </if>
      <if test="heartbeatInterval != null">
        HEARTBEAT_INTERVAL = #{heartbeatInterval,jdbcType=DOUBLE},
      </if>
      <if test="tlsVersion != null">
        TLS_VERSION = #{tlsVersion,jdbcType=VARCHAR},
      </if>
      <if test="publicKeyPath != null">
        PUBLIC_KEY_PATH = #{publicKeyPath,jdbcType=VARCHAR},
      </if>
      <if test="getPublicKey != null">
        GET_PUBLIC_KEY = #{getPublicKey,jdbcType=CHAR},
      </if>
      <if test="networkNamespace != null">
        NETWORK_NAMESPACE = #{networkNamespace,jdbcType=VARCHAR},
      </if>
      <if test="compressionAlgorithm != null">
        COMPRESSION_ALGORITHM = #{compressionAlgorithm,jdbcType=CHAR},
      </if>
      <if test="zstdCompressionLevel != null">
        ZSTD_COMPRESSION_LEVEL = #{zstdCompressionLevel,jdbcType=INTEGER},
      </if>
      <if test="tlsCiphersuites != null">
        TLS_CIPHERSUITES = #{tlsCiphersuites,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where CHANNEL_NAME = #{channelName,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zzp.mall.model.ReplicationConnectionConfiguration">
    update replication_connection_configuration
    set HOST = #{host,jdbcType=CHAR},
      PORT = #{port,jdbcType=INTEGER},
      USER = #{user,jdbcType=CHAR},
      NETWORK_INTERFACE = #{networkInterface,jdbcType=CHAR},
      AUTO_POSITION = #{autoPosition,jdbcType=CHAR},
      SSL_ALLOWED = #{sslAllowed,jdbcType=CHAR},
      SSL_CA_FILE = #{sslCaFile,jdbcType=VARCHAR},
      SSL_CA_PATH = #{sslCaPath,jdbcType=VARCHAR},
      SSL_CERTIFICATE = #{sslCertificate,jdbcType=VARCHAR},
      SSL_CIPHER = #{sslCipher,jdbcType=VARCHAR},
      SSL_KEY = #{sslKey,jdbcType=VARCHAR},
      SSL_VERIFY_SERVER_CERTIFICATE = #{sslVerifyServerCertificate,jdbcType=CHAR},
      SSL_CRL_FILE = #{sslCrlFile,jdbcType=VARCHAR},
      SSL_CRL_PATH = #{sslCrlPath,jdbcType=VARCHAR},
      CONNECTION_RETRY_INTERVAL = #{connectionRetryInterval,jdbcType=INTEGER},
      CONNECTION_RETRY_COUNT = #{connectionRetryCount,jdbcType=BIGINT},
      HEARTBEAT_INTERVAL = #{heartbeatInterval,jdbcType=DOUBLE},
      TLS_VERSION = #{tlsVersion,jdbcType=VARCHAR},
      PUBLIC_KEY_PATH = #{publicKeyPath,jdbcType=VARCHAR},
      GET_PUBLIC_KEY = #{getPublicKey,jdbcType=CHAR},
      NETWORK_NAMESPACE = #{networkNamespace,jdbcType=VARCHAR},
      COMPRESSION_ALGORITHM = #{compressionAlgorithm,jdbcType=CHAR},
      ZSTD_COMPRESSION_LEVEL = #{zstdCompressionLevel,jdbcType=INTEGER},
      TLS_CIPHERSUITES = #{tlsCiphersuites,jdbcType=LONGVARCHAR}
    where CHANNEL_NAME = #{channelName,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zzp.mall.model.ReplicationConnectionConfiguration">
    update replication_connection_configuration
    set HOST = #{host,jdbcType=CHAR},
      PORT = #{port,jdbcType=INTEGER},
      USER = #{user,jdbcType=CHAR},
      NETWORK_INTERFACE = #{networkInterface,jdbcType=CHAR},
      AUTO_POSITION = #{autoPosition,jdbcType=CHAR},
      SSL_ALLOWED = #{sslAllowed,jdbcType=CHAR},
      SSL_CA_FILE = #{sslCaFile,jdbcType=VARCHAR},
      SSL_CA_PATH = #{sslCaPath,jdbcType=VARCHAR},
      SSL_CERTIFICATE = #{sslCertificate,jdbcType=VARCHAR},
      SSL_CIPHER = #{sslCipher,jdbcType=VARCHAR},
      SSL_KEY = #{sslKey,jdbcType=VARCHAR},
      SSL_VERIFY_SERVER_CERTIFICATE = #{sslVerifyServerCertificate,jdbcType=CHAR},
      SSL_CRL_FILE = #{sslCrlFile,jdbcType=VARCHAR},
      SSL_CRL_PATH = #{sslCrlPath,jdbcType=VARCHAR},
      CONNECTION_RETRY_INTERVAL = #{connectionRetryInterval,jdbcType=INTEGER},
      CONNECTION_RETRY_COUNT = #{connectionRetryCount,jdbcType=BIGINT},
      HEARTBEAT_INTERVAL = #{heartbeatInterval,jdbcType=DOUBLE},
      TLS_VERSION = #{tlsVersion,jdbcType=VARCHAR},
      PUBLIC_KEY_PATH = #{publicKeyPath,jdbcType=VARCHAR},
      GET_PUBLIC_KEY = #{getPublicKey,jdbcType=CHAR},
      NETWORK_NAMESPACE = #{networkNamespace,jdbcType=VARCHAR},
      COMPRESSION_ALGORITHM = #{compressionAlgorithm,jdbcType=CHAR},
      ZSTD_COMPRESSION_LEVEL = #{zstdCompressionLevel,jdbcType=INTEGER}
    where CHANNEL_NAME = #{channelName,jdbcType=CHAR}
  </update>
</mapper>